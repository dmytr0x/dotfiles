# Bash
[[language]]
name = "bash"
indent = { tab-width = 2, unit = "  " }
formatter = { command = 'shfmt', args = ["-i", "2", "-bn", "-ci"] }
auto-format = true

# Yaml
[[language]]
name = "yaml"
file-types = ["yaml", "yml"]
language-servers = ["yaml-language-server"]
formatter = { command = "yamlfmt", args = ["-"] }
auto-format = false

[language-server.yaml-language-server.yaml]
format = { enable = true }
validation = true

# Json
[[language]]
name = "json"
language-servers = ["vscode-json-language-server"]

# Css
[[language]]
name = 'css'
language-servers = ['vscode-css-language-server']

# Html
[[language]]
name = 'html'
language-servers = ['vscode-html-language-server']

# Toml
[[language]]
name = "toml"
formatter = { command = "taplo", args = ["fmt", "-"] }

# Lua
[[language]]
name = "lua"
auto-format = true

# Python
[[language]]
name = "python"
# format the code + organize imports
formatter = { command = "sh", args = ["-c", "ruff format - | ruff check --select I --fix -"] }
auto-format = true
language-servers = ["basedpyright", "ruff"]

[language-server.basedpyright]
command = "basedpyright-langserver"
args = ["--stdio"]

# More info: https://docs.basedpyright.com/latest/configuration/language-server-settings/
[language-server.basedpyright.config.basedpyright.analysis]
typeCheckingMode = "recommended"
diagnosticMode = "openFilesOnly" # "openFilesOnly" / "workspace"

[language-server.ruff]
command = "ruff"
args = ["server"]

# TODO: check how it works
[language-server.ruff.config.settings]
configurationPreference = "filesystemFirst"

[language-server.ruff.config.settings.format]
preview = false

[language-server.ruff.config.settings.lint]
preview = false

# Rust
[[language]]
name = "rust"
auto-format = true

[language-server.rust-analyzer]
command = "rust-analyzer"

[language-server.rust-analyzer.config.check]
check = { command = "clippy", features = "all" }
diagnostics = { experimental = { enable = true } }
hover = { actions = { enable = true } }
typing = { autoClosingAngleBrackets = { enable = true } }
cargo = { allFeatures = true }
procMacro = { enable = true }

# Go
[[language]]
name = "go"
auto-format = true
formatter = { command = "goimports" }
