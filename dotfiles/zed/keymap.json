// Zed keymap
//
// For information on binding keys, see the Zed
// documentation: https://zed.dev/docs/key-bindings
//
// To see the default key bindings run `zed: open default keymap`
// from the command palette.
[
  // Navigation
  {
    "context": "Dock || Terminal || ProjectPanel || (Editor && vim_mode == normal)",
    "bindings": {
      "shift shift": "command_palette::Toggle",
      // pane navigation
      "space w h": ["workspace::ActivatePaneInDirection", "Left"],
      "space w l": ["workspace::ActivatePaneInDirection", "Right"],
      "space w k": ["workspace::ActivatePaneInDirection", "Up"],
      "space w j": ["workspace::ActivatePaneInDirection", "Down"],
      // pane swapping
      "space w L": ["workspace::SwapPaneInDirection", "Right"],
      "space w K": ["workspace::SwapPaneInDirection", "Up"],
      "space w J": ["workspace::SwapPaneInDirection", "Down"],
      "space w H": ["workspace::SwapPaneInDirection", "Left"]
    }
  },
  // Change behaviour similar to the helix editor: {
  // x - select current line
  // d - delete current character right
  // D - delete current character left
  {
    "context": "VimControl && !menu",
    "bindings": {
      "shift-v": null,
      "x": "vim::ToggleVisualLine"
    }
  },
  {
    "context": "vim_mode == normal",
    "bindings": {
      "d": "vim::DeleteRight",
      "shift-d": "vim::DeleteLeft"
    }
  },
  // }
  // Extend behaviour of the completion menu navigation: {
  {
    "context": "Editor && (showing_code_actions || showing_completions)",
    "use_key_equivalents": true,
    "bindings": {
      "ctrl-k": "editor::ContextMenuPrev",
      "ctrl-j": "editor::ContextMenuNext"
    }
  },
  // }
  // Move lines up and down in visual mode
  {
    "context": "Editor && vim_mode == visual && !VimWaiting && !VimObject",
    "bindings": {
      "ctrl-j": "editor::MoveLineDown",
      "ctrl-k": "editor::MoveLineUp"
    }
  },
  // Vim normal mode
  {
    "context": "Editor && vim_mode == normal && !VimWaiting && !menu",
    "bindings": {
      // Extra menu "Space Space"
      "space space a": "editor::ToggleInlayHints",
      "space space i": "editor::ToggleIndentGuides",
      "space space s": "editor::ToggleSoftWrap",
      "space space g": "editor::ToggleGitBlame",
      "space space b": "editor::ToggleGitBlame",
      // Main menu "Space"
      "space q": "pane::CloseActiveItem",
      "space d": "diagnostics::Deploy",
      "space f": "file_finder::Toggle",
      "space shift-f": "project_panel::ToggleFocus",
      "space b": "tab_switcher::Toggle",
      "space s": "outline::Toggle",
      "space S": "project_symbols::Toggle",
      "space /": "workspace::NewSearch",
      "space t": "workspace::NewCenterTerminal",
      "space c": "editor::ToggleComments",
      "space a": "editor::ToggleCodeActions",
      "space g": [
        "task::Spawn",
        { "task_name": "start lazygit", "reveal_target": "center" }
      ],
      // disable default editor::Rename keybinding
      "c d": null,
      "space r": "editor::Rename",
      "space w s": "pane::SplitHorizontal",
      "space w v": "pane::SplitVertical",
      "space w o": "pane::CloseInactiveItems"
      //
    }
  },
  // Vim insert mode
  {
    "context": "Editor && vim_mode == insert && !menu",
    "bindings": {
      "ctrl-w": "editor::DeleteToPreviousWordStart",
      "ctrl-k": "vim::DeleteToEndOfLine",
      // Exit vim insert mode
      "j k": ["workspace::SendKeystrokes", "escape"]
    }
  },
  // Vim visual mode
  {
    "context": "Editor && vim_mode == visual && !VimWaiting && !menu",
    "bindings": {
      "n": "editor::SelectLargerSyntaxNode",
      "N": "editor::SelectSmallerSyntaxNode",
      "space c": "editor::ToggleComments",
      "m": "vim::SelectNext",
      "M": "vim::SelectPrevious",
      ",": "editor::SplitSelectionIntoLines"
    }
  },
  // Like vim buffers
  {
    "context": "TabSwitcher",
    "use_key_equivalents": true,
    "bindings": {
      "tab": null,
      "shift-tab": null,
      "k": "menu::SelectPrev",
      "j": "menu::SelectNext",
      "q": "tab_switcher::CloseSelectedItem"
    }
  }
]
